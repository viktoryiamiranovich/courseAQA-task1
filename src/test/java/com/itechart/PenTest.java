package com.itechart;

import org.testng.Assert;
import org.testng.annotations.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

/**
 * Unit test for simple App.
 */
public class PenTest
{
    /**
     * Rigorous Test :-)
     */

    private Pen pen;
    private ByteArrayOutputStream output = new ByteArrayOutputStream();

    @BeforeTest
    public void setUpStreams() {
        System.setOut(new PrintStream(output));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1", "color3"})
    public void testConstructorPen(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
    }

    @Test (expectedExceptions = IllegalArgumentException.class)
    @Parameters({"inkContainerValue5", "sizeLetter1", "color1"})
    public void testConstructorContainerNull(Integer inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
    }

    @Test (expectedExceptions = IllegalArgumentException.class)
    @Parameters({"inkContainerValue1", "sizeLetter5", "color1"})
    public void testConstructorSizeLetterNull(int inkContainerValue, Double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
    }

    @Test (expectedExceptions = IllegalArgumentException.class)
    @Parameters({"inkContainerValue1", "sizeLetter1", "color3"})
    public void testConstructorColorNull(int inkContainerValue, Double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
    }

    @Test
    @Parameters({"inkContainerValue2"})
    public void testWriteFalse(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertEquals("", pen.write("fff"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1"})
    public void testWriteUseAllContainer(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("1234567890", pen.write("1234567890"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1"})
    public void testWriteUseNotAllContainer(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("1234567", pen.write("1234567"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter4"})
    public void testWriteRestInContainer(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String str = pen.write("1234");
        double length = str.length()*sizeLetter;
        inkContainerValue -= length;
        Assert.assertEquals(3, inkContainerValue);
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter4"})
    public void testWriteRestInContainerLongWord(int inkContainerValue, double sizeLetter) throws NoSuchFieldException {
        pen = new Pen(inkContainerValue, sizeLetter);
        String str = pen.write("123456789012");
        if (str.length() >= inkContainerValue) {
            inkContainerValue = 0;
        }
        Assert.assertEquals(0, inkContainerValue);
    }

    @Test
    @Parameters({"inkContainerValue4", "sizeLetter1"})
    public void testWriteSpace(int inkContainerValue, double sizeLetter) { //тест упадет, так как чернила используютя для пробелов
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("  ", pen.write("  "));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter2"})
    public void testWriteUseAllNotDefaultLetter(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("12345", pen.write("12345"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1"})
    public void testWritePartOfWordDefaultLetter(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("1234567890", pen.write("12345678901"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter2"})
    public void testWritePartOfWordBigLetter(int inkContainerValue, double sizeLetter) { //Тест упадет, так как в коде неверно считается до какого символа берется часть слова
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("12345", pen.write("12345678901"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter3"})
    public void testWriteZeroLetter(int inkContainerValue, double sizeLetter) { //Тест упадет, так как в коде не обрабатывается, если размер чернил 0 или отрицательный
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("", pen.write("12345678901"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter4"}) //Тест упадет, так как в коде неверно считается до какого символа берется часть слова
    public void testWritePartOfWordLetterNotInt(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("123456", pen.write("1234567890"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter4"})
    public void testWriteAllWordLetterNotInt(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertEquals("123456", pen.write("123456"));
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1", "color1"})
    public void testGetColorBlue(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertEquals("BLUE", pen.getColor());
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1", "color1"})
    public void testGetColorNegative(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertNotEquals("Black", pen.getColor());
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1", "color2"})
    public void testGetColorRed(int inkContainerValue, double sizeLetter, String color) { //Тест упадет, так как getColor всегда возвращает BLUE
        pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertEquals("RED", pen.getColor());
    }

    @Test
    @Parameters({"inkContainerValue4"})
    public void testIsWorkTrue(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertTrue(pen.isWork());
    }

    @Test
    @Parameters({"inkContainerValue2"})
    public void testIsWorkFalseZero(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertFalse(pen.isWork());
    }

    @Test
    @Parameters({"inkContainerValue3"})
    public void testIsWorkFalse(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertFalse(pen.isWork());
    }

    @Test
    @Parameters({"inkContainerValue1", "sizeLetter1", "color2"})
    public void testDoSomethingElse(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        pen.doSomethingElse();
        Assert.assertEquals(color+"\n", output.toString());
    }

    @AfterTest
    public void cleanUpStreams() {
        System.setOut(null);
    }
}
