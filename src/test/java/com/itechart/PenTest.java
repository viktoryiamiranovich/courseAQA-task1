package com.itechart;

import org.testng.Assert;
import org.testng.annotations.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

/**
 * Unit test for simple App.
 */
public class PenTest
{
    /**
     * Rigorous Test :-)
     */

    private Pen pen;

    @DataProvider(name = "data-for-constructorContainer")
    public Object[][] dataProviderForConstructorContainer() {
        return new Object[][] {
                {10}
        };
    }

    @DataProvider(name = "data-for-constructorContainerAndSize")
    public Object[][] dataProviderForConstructorContainerAndSize() {
        return new Object[][] {
                {10, 1.0}
        };
    }

    @DataProvider(name = "data-for-constructorPen")
    public Object[][] dataProviderForConstructorPen() {
        return new Object[][] {
                {10, 1.0, "BLUE"}
        };
    }

    @DataProvider(name = "data-for-writeWholeWord")
    public Object[][] dataProviderForWriteWholeWord() {
        return new Object[][] {
                {10, 1.0, "1234567890"},
                {10, 1.0, "12345678"},
                {10, 2.0, "12345"},
                {10, 2.0, "123"},
                {10, 2.5, "1234"},
                {5, 0.5, "1234567890"},
                {5, 1.0, ""}
        };
    }

    @DataProvider(name = "data-for-WriteWordWithoutColor")
    public Object[][] dataProviderForWriteWordWithoutColor() {
        return new Object[][] {
                {10, 1.0, null, "12345678"},
                {10, 2.0, "", "12345"}
        };
    }

    @DataProvider(name = "data-for-partOfWord")
    public Object[][] dataProviderForWritePartOfWord() {
        return new Object[][] {
                {10, 1.0, "12345678901"},
                {10, 2.0, "12345678901"},
                {1, 2.0, "123"},
                {2, 0.3, "1234567890"},
                {0, 1.0, "123"}
        };
    }

    @DataProvider(name = "data-for-writeWordException")
    public Object[][] dataProviderForWriteWordException() {
        return new Object[][] {
                {10, -2.0, "1234567890"},
                {-10, -2.0, "1234567890"},
                {10, 0, "1234567890"}
        };
    }

    @DataProvider(name = "data-for-writeSpace")
    public Object[][] dataProviderForWriteSpace() {
        return new Object[][] {
                {8, 1.0, "Test word"},
                {6, 1.0, " Tes t"}
        };
    }

    @DataProvider(name = "data-for-getColorWithColor")
    public Object[][] dataProviderForGetColor() {
        return new Object[][] {
                {10, 1.0, "RED"},
                {10, 1.0, "Black"},
                {10, 1.0, "Blue"},
                {10, 1.0, "BLUE"},
                {10, 1.0, "BLUE WAVES"},
                {10, 1.0, ""},
                {10, 1.0, " RED"},
                {10, 1.0, "BLUE "},
                {10, 1.0, " "}
        };
    }

    @DataProvider(name = "data-for-getColorWithoutColor")
    public Object[][] dataProviderForGetColorWithoutColor() {
        return new Object[][] {
                {10, 1.0}
        };
    }

    @DataProvider(name = "data-for-writeFalse")
    public Object[][] dataProviderForWriteFalse() {
        return new Object[][] {
                {-10, "Test"},
                {0, "Test"}
        };
    }

    @DataProvider(name = "data-for-isWorkPositive")
    public Object[][] dataProviderForIsWorkPositive() {
        return new Object[][] {
                {1},
                {1000}
        };
    }

    @DataProvider(name = "data-for-isWorkNegative")
    public Object[][] dataProviderForIsWorkNegative() {
        return new Object[][] {
                {-10},
                {0}
        };
    }


    @Test (dataProvider = "data-for-constructorContainer")
    public void testConstructorContainer(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertNotNull(pen);
    }

    @Test (dataProvider = "data-for-constructorContainerAndSize")
    public void testConstructorContainerAndSize(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertNotNull(pen);
    }

    @Test (dataProvider = "data-for-constructorPen")
    public void testConstructorPen(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertNotNull(pen);
    }

    @Test (dataProvider = "data-for-writeFalse")
    public void testWriteFalse(int inkContainerValue, String word) {
        pen = new Pen(inkContainerValue);
        String actual = pen.write(word);
        Assert.assertTrue(actual.isEmpty());
    }

    @Test (dataProvider = "data-for-writeWholeWord")
    public void testWriteUseNotAllContainer(int inkContainerValue, double sizeLetter, String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertEquals(actual, word);
    }

    @Test (dataProvider = "data-for-WriteWordWithoutColor")
    public void testWriteWordWithoutColor(int inkContainerValue, double sizeLetter, String color, String word) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        String actual = pen.write(word);
        Assert.assertTrue(actual.isEmpty());
    }

    @Test (dataProvider = "data-for-partOfWord")
    public void testWritePartOfWord(int inkContainerValue, double sizeLetter, String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        inkContainerValue /=sizeLetter;
        String expected = word.substring(0, inkContainerValue);
        Assert.assertEquals(actual, expected);
    }

    @Test (dataProvider = "data-for-writeSpace")
    public void testWriteSpace(int inkContainerValue, double sizeLetter, String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        inkContainerValue /= sizeLetter;
        String expected = word.replaceAll("\\s+","");
        if (expected.length() > inkContainerValue) {
            expected = expected.substring(0, inkContainerValue);
        }
        Assert.assertEquals(actual, expected);
    }

    @Test (dataProvider = "data-for-writeWordException", expectedExceptions = IllegalArgumentException.class)
    public void testWriteSizeLetterException(int inkContainerValue, double sizeLetter, String word) {
        pen = new Pen(inkContainerValue, sizeLetter);
        String actual = pen.write(word);
        Assert.assertTrue(actual.isEmpty());
    }

    @Test (dataProvider = "data-for-getColorWithColor")
    public void testGetColorWithColor(int inkContainerValue, double sizeLetter, String color) {
        pen = new Pen(inkContainerValue, sizeLetter, color);
        Assert.assertEquals(pen.getColor(), color);
    }

    @Test (dataProvider = "data-for-getColorWithoutColor")
    public void testGetColorWithoutColor(int inkContainerValue, double sizeLetter) {
        pen = new Pen(inkContainerValue, sizeLetter);
        Assert.assertNull(pen.getColor());
    }

    @Test (dataProvider = "data-for-isWorkPositive")
    public void testIsWorkTrue(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertTrue(pen.isWork());
    }

    @Test (dataProvider = "data-for-isWorkNegative")
    public void testIsWorkFalse(int inkContainerValue) {
        pen = new Pen(inkContainerValue);
        Assert.assertFalse(pen.isWork());
    }

    @Test (dataProvider = "data-for-getColorWithColor")
    public void testDoSomethingElseWithColor(int inkContainerValue, double sizeLetter, String color) {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(output);

        pen = new Pen(inkContainerValue, sizeLetter, color);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();
        Assert.assertEquals(output.toString().trim(), color);
    }

    @Test (dataProvider = "data-for-getColorWithoutColor")
    public void testDoSomethingElseWithoutColor(int inkContainerValue, double sizeLetter) {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(output);

        pen = new Pen(inkContainerValue, sizeLetter);
        System.setOut(printStream);
        pen.doSomethingElse();
        System.setOut(System.out);
        printStream.flush();
        Assert.assertTrue(output.toString().trim().isEmpty());
    }
}
